"""Module Vulnerability. Safe the Findings in a class
"""
from termcolor import colored
import logging
from ..helper.decorators import accepts


class Vulnerability(object):
    """Vulnerability Class is used to exchange and describe the findings

    Arguments:
        object {[type]} -- [description]
    """

    def __init__(self, bug_class, reason, instr=None, desc=None, prob=0):
        """
            Konstruktor. Give it a bug class identifier. Give the Reason a very detailed description and pass it the
            vulnurable instruction.
            The probability will highlight in the output later

            Example reason
            Print something like:
            vuln 0x7e7      mov.q [RSI], [RDI]

                            Source -> fgets(var_808, 2049);
                            Potential Overflow!
                                    dst var_808 = 1024
                                    src var_8c9 = 2048
        """
        self.bug_class = bug_class
        self.instr = instr
        self.desc = desc
        self.reason = reason
        self._probability = prob

    def __hash__(self):
        """
        used to fast find duplicates
        :return:
        """
        return hash(str(self))

    def __str__(self):
        return "{}({})".format(type(self).__name__,
                               ", ".join(["{}={}".format(k, self.__dict__[k]) for k in sorted(self.__dict__)]))

    def __eq__(self, other):
        return isinstance(other, type(self)) and hash(self) == hash(other)

    def __ne__(self, other):
        return not self == other

    @property
    def probability(self):
        """
        Getter for the probability value
        :return integer:
        """
        return self._probability

    @probability.setter
    @accepts(object, int)
    def probability(self, number):
        """
        Will set the probability of a finding. Higher if more certain

        If the number is out of range. It will automatically use 0 and print a warning
        Arguments:
            number {[int]} -- [probability from 0-100]
        """
        if 0 <= number <= 100:
            self._probability = number
        else:
            logging.warning('Vulnerability probability is out of range (0-100) ! Using 0')
            self._probability = 0
        return

    @accepts(object, str)
    def set_reason(self, reason):
        """
        Set the Reason

        Arguments:
            reason {[str]} -- [set the reason]
        """

        self.reason = reason
        return

    @accepts(object, str)
    def append_reason(self, reason):
        """
        append text to reason

        Arguments:
            reason {[str]} -- [Append to the Reason]
        """

        self.reason = self.reason + "\nNote:\n" + reason
        return

    def cmd_print_finding(self):
        """
        Will print the finding in a colored way. But information to be printed is left to the Plugin developer.
        It will use according to the probability different color schemes:

        Color   -   Probability
        -----------------------
        red     -   80-100
        orange  -   60-79
        yellow  -   40-59
        blue    -   20-39
        white   -    0-19

        :return:
        """
        x = self.probability
        color = ((0 <= x < 20) and "white") or \
                ((20 <= x < 40) and "blue") or \
                ((40 <= x < 60) and "yellow") or \
                ((60 <= x < 80) and "orange") or \
                ((80 <= x <= 100) and "red") or 'n/a'

        print("Vulnerability:\n{}\nDescription:\n{}\n---".format(colored(self.reason, color),
                                                            colored(self.desc, "green")))


