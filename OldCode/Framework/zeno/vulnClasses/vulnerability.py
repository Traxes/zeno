"""Module Vulnerability. Safe the Findings in a class
"""
from termcolor import colored

class Vulnerability(object):
    """Vulnerability Class is used to exchange and describe the findings

    Arguments:
        object {[type]} -- [description]
    """

    def __init__(self, bug_class, function_name, operation, instr, vars, desc, reason, source, prob):
        self.bug_class = bug_class
        self.function_name = function_name
        self.operation = operation
        self.instr = instr
        self.vars = vars
        self.desc = desc
        self.reason = reason
        self.source = source
        self.probability = prob

    def set_probability(self, number):
        """Will set the probability of a finding. Higher if more certain

        Arguments:
            number {[int]} -- [probability from 0-100]
        """
        if number >= 0 and number <= 100:
            self.probability = number
        return

    def set_reason(self, reason):
        """Set Reason

        Arguments:
            reason {[str]} -- [set the reason]
        """

        self.reason = reason
        return

    def set_source(self, source):
        self.source = source

    def append_reason(self, reason):
        """append to reason

        Arguments:
            reason {[str]} -- [Append to the Reason]
        """

        self.reason = self.reason + "\n\n" + reason
        return

    def print_finding(self):
        # TODO Pretty print it

"""
Print something like:
vuln 0x7e7      mov.q [RSI], [RDI]

                Source -> fgets(var_808, 2049);
                Potential Overflow!
                        dst var_808 = 1024
                        src var_8c9 = 2048
"""




        print(colored(self.bug_class))
        cf = []
        cf.append(syms)
        print("{} 0x{:x}\t{}".format(self.function_name, self.instr.address, ))
        print(self.instr.function)
        print("YAY")
        
